import * as s from "react";
import { jsx as C } from "react/jsx-runtime";
import { r as P } from "./index-B7Vxkz5-.js";
import { S as w } from "./index-nyDQUcyF.js";
function g(t, e = []) {
  let o = [];
  function c(i, n) {
    const r = s.createContext(n), a = o.length;
    o = [...o, n];
    const d = (m) => {
      var S;
      const { scope: f, children: v, ...p } = m, x = ((S = f == null ? void 0 : f[t]) == null ? void 0 : S[a]) || r, h = s.useMemo(() => p, Object.values(p));
      return /* @__PURE__ */ C(x.Provider, { value: h, children: v });
    };
    d.displayName = i + "Provider";
    function l(m, f) {
      var x;
      const v = ((x = f == null ? void 0 : f[t]) == null ? void 0 : x[a]) || r, p = s.useContext(v);
      if (p) return p;
      if (n !== void 0) return n;
      throw new Error(`\`${m}\` must be used within \`${i}\``);
    }
    return [d, l];
  }
  const u = () => {
    const i = o.map((n) => s.createContext(n));
    return function(r) {
      const a = (r == null ? void 0 : r[t]) || i;
      return s.useMemo(
        () => ({ [`__scope${t}`]: { ...r, [t]: a } }),
        [r, a]
      );
    };
  };
  return u.scopeName = t, [c, E(u, ...e)];
}
function E(...t) {
  const e = t[0];
  if (t.length === 1) return e;
  const o = () => {
    const c = t.map((u) => ({
      useScope: u(),
      scopeName: u.scopeName
    }));
    return function(i) {
      const n = c.reduce((r, { useScope: a, scopeName: d }) => {
        const m = a(i)[`__scope${d}`];
        return { ...r, ...m };
      }, {});
      return s.useMemo(() => ({ [`__scope${e.scopeName}`]: n }), [n]);
    };
  };
  return o.scopeName = e.scopeName, o;
}
var y = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
], M = y.reduce((t, e) => {
  const o = s.forwardRef((c, u) => {
    const { asChild: i, ...n } = c, r = i ? w : e;
    return typeof window < "u" && (window[Symbol.for("radix-ui")] = !0), /* @__PURE__ */ C(r, { ...n, ref: u });
  });
  return o.displayName = `Primitive.${e}`, { ...t, [e]: o };
}, {});
function N(t, e) {
  t && P.flushSync(() => t.dispatchEvent(e));
}
function D(t) {
  const e = s.useRef(t);
  return s.useEffect(() => {
    e.current = t;
  }), s.useMemo(() => (...o) => {
    var c;
    return (c = e.current) == null ? void 0 : c.call(e, ...o);
  }, []);
}
var R = globalThis != null && globalThis.document ? s.useLayoutEffect : () => {
};
export {
  M as P,
  R as a,
  g as c,
  N as d,
  D as u
};
