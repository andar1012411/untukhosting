import { useRef as E, useState as p, useEffect as v, useCallback as b } from "react";
function S({
  itemCount: l,
  itemHeight: t,
  overscan: u = 3,
  containerHeight: n
}) {
  const e = E(null), [f, h] = p(0), [x, s] = p(n || 0);
  v(() => {
    if (n)
      s(n);
    else if (e.current) {
      s(e.current.clientHeight);
      const r = new ResizeObserver((R) => {
        s(R[0].contentRect.height);
      }), o = e.current;
      return o && r.observe(o), () => {
        o && r.unobserve(o);
      };
    }
  }, [n]);
  const c = b(() => {
    e.current && h(e.current.scrollTop);
  }, []);
  v(() => {
    const r = e.current;
    if (r)
      return r.addEventListener("scroll", c), () => {
        r.removeEventListener("scroll", c);
      };
  }, [c]);
  const T = b(
    (r) => {
      e.current && (e.current.scrollTop = r * t);
    },
    [t]
  ), M = l * t, a = Math.max(0, Math.floor(f / t) - u), i = Math.min(l - 1, Math.floor((f + x) / t) + u), d = [];
  for (let r = a; r <= i; r++)
    d.push({
      index: r,
      start: r * t
    });
  return {
    virtualItems: d,
    startIndex: a,
    endIndex: i,
    containerRef: e,
    totalHeight: M,
    scrollTo: T
  };
}
export {
  S as useVirtualization
};
